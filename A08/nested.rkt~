;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname nested) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; A (nested-listof X) is one of:
;; * empty
;; * (cons (nested-listof X) (nested-listof X))
;; * (cons X (nested-listof X))
;; Requires: X itself is not a list type
;; a NotAList is an Any that is not a list type

;; nested-listof-X-template: (nested-listof X) -> Any
(define (nested-listof-X-template nlox)
  (cond
    [(empty? nlox) ...]
    [(... (first nlox)) (... (nested-listof-X-template (rest nlox)))]
    [else (nested-listof-X-template (rest nlox))]))

;; (nested-count nlonal) consumes a nlonal (nested-listof
;;   NotAList) and produces the number of NotAList elements
;;   that appear anywhere in the nested list
;; nested-count: (nested-listof NotAList) -> Nat
;; Examples:
(check-expect (nested-count empty) 0)
(check-expect (nested-count (list 1 (list 1 1))) 3)

(define (nested-count nlonal)
  (cond
    [(empty? nlonal) 0]
    [(list? (first nlonal)) (+ (nested-count (first nlonal)) (nested-count (rest nlonal)))]
    [else (add1 (nested-count (rest nlonal)))]))

;; Tests:
(check-expect (nested-count '(1 2 3 4 5)) 5)
(check-expect (nested-count '(1 2 (3 4 (5)))) 5)
(check-expect (nested-count empty) 0)
(check-expect (nested-count '((1) (1) ((1)))) 3)

;; (nested-sum nlon) consumes a nlon (nested-listof Num) and
;;   produces the sum of every number that appears anywhere in
;;   the nested list
;; nested-sum: (nested-listof Num) -> Num
;; Examples:
(check-expect (nested-sum empty) 0)
(check-expect (nested-sum (list 1 (list 1 empty))) 2)

(define (nested-sum nlon)
  (cond
    [(empty? nlon) 0]
    [(list? (first nlon)) (+ (nested-sum (first nlon)) (nested-sum (rest nlon)))]
    [else (+ (first nlon) (nested-sum (rest nlon)))]))

;; Tests:
(check-expect (nested-sum '(1 2 3 4 5)) 15)
(check-expect (nested-sum '(1 2 (3 4 (5)))) 15)
(check-expect (nested-sum empty) 0)
(check-expect (nested-sum '((1) (1) ((1)))) 3)

;; (nested-member? nal nlnal) consumes a nal (NotAList) value
;;   and a nlnal (nested-listof NotAList) (in that order) and
;;   produces true if the value appears anywhere in the nested
;;   list, and false otherwise
;; nested-member?: NotAList (nested-listof NotAList) -> Bool
;; Examples:
(check-expect (nested-member? 'hot-dog '((pizza) (hamburger) (((hot-dog))))) true)
(check-expect (nested-member? 'None '((pizza) (hamburger) (((hot-dog))))) false)

(define (nested-member? nal nlonal)
  (cond
    [(empty? nlonal) false]
    [(list? (first nlonal)) (or (nested-member? nal (first nlonal)) 
    (nested-member? nal (rest nlonal)))]
    [(equal? nal (first nlonal)) true]
    [else (nested-member? nal (rest nlonal))]))

;; Tests:
(check-expect (nested-member? "string" '("string" 2 3 4 5)) true)
(check-expect (nested-member? 5 '(1 2 (3 4 (5)))) true)
(check-expect (nested-member? "x" empty) false)
(check-expect (nested-member? 2 '((1) (1) ((1)))) false)

;; (nested-ref nlona k) consumes a nlona (nested-listof
;;   NotAList) and a natural number k (in that order) and
;;   produces the k-th element that appears in the nested list.
;; nested-ref: (nested-listof NotAList) Nat -> Any
;; Examples:
(check-expect (nested-ref '((0) 1 2 (3 4) 5 (6 7 (8)) 9 () (((hot-dog)))) 0) 0)
(check-expect (nested-ref '((0) 1 2 (3 4) 5 (6 7 (8)) 9 () (((hot-dog)))) 1) 1)

(define (nested-ref nlonal k)
  (cond
    [(empty? (first nlonal)) (nested-ref (rest nlonal) k)]
    [(and (= k 0) (not (list? (first nlonal)))) (first nlonal)]
    [(and (= k 0) (list? (first nlonal))) (nested-ref (first nlonal) k)]
    [(list? (first nlonal)) (local
                              [(define count (- k (nested-count (first nlonal))))]
                              (cond
                                [(<= 0 count) (nested-ref (rest nlonal) count)]
                                [(> 0 count) (nested-ref nlonal k)]))]
    [else (nested-ref (rest nlonal) (sub1 k))]))

;; Tests:
(check-expect (nested-ref '(1 2 3 4 5) 3) 4)
(check-expect (nested-ref '((1) (1) ((1))) 2) 1)

;; (nested-filter predicate? nlox) consumes a predicate
;;   function (X -> Bool) and a (nested-listof X) (in that
;;   order) and removes every element that appears anywhere in
;;   the nested list where the predicate function is false for
;;   that element
;; nested-filter: (X -> Bool) (nested-listof X) ->
;;                  (nested-listof X)
;; Examples:
(check-expect (nested-filter empty? '((0) 1 2 (3 4) 5 (6 7 (8)) 9 () (((hot-dog)))))
(list '() '() (list '()) '() (list (list '()))))
(check-expect (nested-filter list? '((0) 1 2 (3 4) 5 (6 7 (8)) 9 () (((hot-dog)))))
(list '() '() (list '()) '() (list (list '()))))

(define (nested-filter predicate? nlox)
  (cond
    [(empty? nlox) empty]
    [(list? (first nlox))
     (cons (nested-filter predicate? (first nlox)) (nested-filter predicate? (rest nlox)))]
    [(predicate? (first nlox))
     (cons (first nlox) (nested-filter predicate? (rest nlox)))]
    [else (nested-filter predicate? (rest nlox))]))

;; Tests:
(check-expect (nested-filter odd? '(1 2 3 4 5)) (list 1 3 5))
(check-expect (nested-filter even? '(1 2 (3 4 (5)))) (list 2 (list 4 '())))
(check-expect (nested-filter empty? empty) '())
(check-expect (nested-filter string? '((1) (1) ((1)))) (list '() '() (list '())))